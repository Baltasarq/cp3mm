// Person.mpp
/*
	A test of the C++ preprocessor
*/

#include <iostream>
#include <sstream>
#include <string>

import Math;

using namespace std;

namespace BussinessLogic {

class Person {
public:
	static const std::string CanonicalName = "John Doe";
private:
	std::string name;
	unsigned int age;
	std::string email;
	double salary;
public:
	explicit Person(const std::string &n, unsigned int a, const std::string &e)
		: name(n), age(a), email(e)
		{}
	Person(const std::string &n) : name( n )
	    	{}


	inline int getAge() const
		{ return age; }
	void setAge(int a)
		{ age = a; }

	inline const std::string &getEmail() const
		{ return email; }
	void setEmail(const std::string &e)
		{ email = e; }

	inline const std::string &getName() const
		{ return name; }
	void setName(const std::string &n)
		{
			if ( !n.empty() ) {
				name = n;
			}
		}
	inline void putSalary(double x) {
		salary = x;
	}

	inline double getSalary() const {
		return salary;
	}

	inline double getNetSalary() const {
		return Math::removePercentage( salary, 0.20 );
	}

	inline virtual std::string toString() const
                {
                	std::ostringstream out;

                  	out << getName()
				    << ", " << getSalary();

                      return out.str();
                }

}

}

int main()
{
	BussinessLogic::Person p1( BussinessLogic::Person::CanonicalName, 0, "" );
	BussinessLogic::Person p2( "Baltasar", 34, "jbgarcia@uvigo.es" );

	p2.putSalary( 5500 );

	cout << "\nCp3 test\n" << endl;
	cout << p1.getName() << endl;
	cout << p2.getName() << endl;
	cout << "Salary: " << p2.getSalary() ;
	cout << '(' << p2.getNetSalary() << ')' << endl;
	cout << endl;
}
